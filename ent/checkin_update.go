// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"helloworld/ent/checkin"
	"helloworld/ent/predicate"
	"helloworld/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CheckinUpdate is the builder for updating Checkin entities.
type CheckinUpdate struct {
	config
	hooks    []Hook
	mutation *CheckinMutation
}

// Where appends a list predicates to the CheckinUpdate builder.
func (cu *CheckinUpdate) Where(ps ...predicate.Checkin) *CheckinUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCheckinTime sets the "checkin_time" field.
func (cu *CheckinUpdate) SetCheckinTime(i int64) *CheckinUpdate {
	cu.mutation.ResetCheckinTime()
	cu.mutation.SetCheckinTime(i)
	return cu
}

// AddCheckinTime adds i to the "checkin_time" field.
func (cu *CheckinUpdate) AddCheckinTime(i int64) *CheckinUpdate {
	cu.mutation.AddCheckinTime(i)
	return cu
}

// SetEventID sets the "event_id" field.
func (cu *CheckinUpdate) SetEventID(s string) *CheckinUpdate {
	cu.mutation.SetEventID(s)
	return cu
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (cu *CheckinUpdate) SetSenderID(id int) *CheckinUpdate {
	cu.mutation.SetSenderID(id)
	return cu
}

// SetNillableSenderID sets the "sender" edge to the User entity by ID if the given value is not nil.
func (cu *CheckinUpdate) SetNillableSenderID(id *int) *CheckinUpdate {
	if id != nil {
		cu = cu.SetSenderID(*id)
	}
	return cu
}

// SetSender sets the "sender" edge to the User entity.
func (cu *CheckinUpdate) SetSender(u *User) *CheckinUpdate {
	return cu.SetSenderID(u.ID)
}

// Mutation returns the CheckinMutation object of the builder.
func (cu *CheckinUpdate) Mutation() *CheckinMutation {
	return cu.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (cu *CheckinUpdate) ClearSender() *CheckinUpdate {
	cu.mutation.ClearSender()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CheckinUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CheckinUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CheckinUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CheckinUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CheckinUpdate) check() error {
	if v, ok := cu.mutation.CheckinTime(); ok {
		if err := checkin.CheckinTimeValidator(v); err != nil {
			return &ValidationError{Name: "checkin_time", err: fmt.Errorf("ent: validator failed for field \"checkin_time\": %w", err)}
		}
	}
	if v, ok := cu.mutation.EventID(); ok {
		if err := checkin.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf("ent: validator failed for field \"event_id\": %w", err)}
		}
	}
	return nil
}

func (cu *CheckinUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkin.Table,
			Columns: checkin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CheckinTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldCheckinTime,
		})
	}
	if value, ok := cu.mutation.AddedCheckinTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldCheckinTime,
		})
	}
	if value, ok := cu.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkin.FieldEventID,
		})
	}
	if cu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.SenderTable,
			Columns: []string{checkin.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.SenderTable,
			Columns: []string{checkin.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CheckinUpdateOne is the builder for updating a single Checkin entity.
type CheckinUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CheckinMutation
}

// SetCheckinTime sets the "checkin_time" field.
func (cuo *CheckinUpdateOne) SetCheckinTime(i int64) *CheckinUpdateOne {
	cuo.mutation.ResetCheckinTime()
	cuo.mutation.SetCheckinTime(i)
	return cuo
}

// AddCheckinTime adds i to the "checkin_time" field.
func (cuo *CheckinUpdateOne) AddCheckinTime(i int64) *CheckinUpdateOne {
	cuo.mutation.AddCheckinTime(i)
	return cuo
}

// SetEventID sets the "event_id" field.
func (cuo *CheckinUpdateOne) SetEventID(s string) *CheckinUpdateOne {
	cuo.mutation.SetEventID(s)
	return cuo
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (cuo *CheckinUpdateOne) SetSenderID(id int) *CheckinUpdateOne {
	cuo.mutation.SetSenderID(id)
	return cuo
}

// SetNillableSenderID sets the "sender" edge to the User entity by ID if the given value is not nil.
func (cuo *CheckinUpdateOne) SetNillableSenderID(id *int) *CheckinUpdateOne {
	if id != nil {
		cuo = cuo.SetSenderID(*id)
	}
	return cuo
}

// SetSender sets the "sender" edge to the User entity.
func (cuo *CheckinUpdateOne) SetSender(u *User) *CheckinUpdateOne {
	return cuo.SetSenderID(u.ID)
}

// Mutation returns the CheckinMutation object of the builder.
func (cuo *CheckinUpdateOne) Mutation() *CheckinMutation {
	return cuo.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (cuo *CheckinUpdateOne) ClearSender() *CheckinUpdateOne {
	cuo.mutation.ClearSender()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CheckinUpdateOne) Select(field string, fields ...string) *CheckinUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Checkin entity.
func (cuo *CheckinUpdateOne) Save(ctx context.Context) (*Checkin, error) {
	var (
		err  error
		node *Checkin
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CheckinUpdateOne) SaveX(ctx context.Context) *Checkin {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CheckinUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CheckinUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CheckinUpdateOne) check() error {
	if v, ok := cuo.mutation.CheckinTime(); ok {
		if err := checkin.CheckinTimeValidator(v); err != nil {
			return &ValidationError{Name: "checkin_time", err: fmt.Errorf("ent: validator failed for field \"checkin_time\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.EventID(); ok {
		if err := checkin.EventIDValidator(v); err != nil {
			return &ValidationError{Name: "event_id", err: fmt.Errorf("ent: validator failed for field \"event_id\": %w", err)}
		}
	}
	return nil
}

func (cuo *CheckinUpdateOne) sqlSave(ctx context.Context) (_node *Checkin, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   checkin.Table,
			Columns: checkin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkin.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Checkin.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, checkin.FieldID)
		for _, f := range fields {
			if !checkin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != checkin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CheckinTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldCheckinTime,
		})
	}
	if value, ok := cuo.mutation.AddedCheckinTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: checkin.FieldCheckinTime,
		})
	}
	if value, ok := cuo.mutation.EventID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: checkin.FieldEventID,
		})
	}
	if cuo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.SenderTable,
			Columns: []string{checkin.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkin.SenderTable,
			Columns: []string{checkin.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Checkin{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{checkin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
