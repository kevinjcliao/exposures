// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"helloworld/ent/checkin"
	"helloworld/ent/user"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Checkin is the model entity for the Checkin schema.
type Checkin struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CheckinTime holds the value of the "checkin_time" field.
	CheckinTime int64 `json:"checkin_time,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckinQuery when eager-loading is set.
	Edges         CheckinEdges `json:"edges"`
	user_checkins *int
}

// CheckinEdges holds the relations/edges for other nodes in the graph.
type CheckinEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckinEdges) SenderOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Sender == nil {
			// The edge sender was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Sender, nil
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checkin) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkin.FieldID, checkin.FieldCheckinTime:
			values[i] = new(sql.NullInt64)
		case checkin.FieldEventID:
			values[i] = new(sql.NullString)
		case checkin.ForeignKeys[0]: // user_checkins
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Checkin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checkin fields.
func (c *Checkin) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case checkin.FieldCheckinTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field checkin_time", values[i])
			} else if value.Valid {
				c.CheckinTime = value.Int64
			}
		case checkin.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				c.EventID = value.String
			}
		case checkin.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_checkins", value)
			} else if value.Valid {
				c.user_checkins = new(int)
				*c.user_checkins = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySender queries the "sender" edge of the Checkin entity.
func (c *Checkin) QuerySender() *UserQuery {
	return (&CheckinClient{config: c.config}).QuerySender(c)
}

// Update returns a builder for updating this Checkin.
// Note that you need to call Checkin.Unwrap() before calling this method if this Checkin
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checkin) Update() *CheckinUpdateOne {
	return (&CheckinClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Checkin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Checkin) Unwrap() *Checkin {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Checkin is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checkin) String() string {
	var builder strings.Builder
	builder.WriteString("Checkin(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", checkin_time=")
	builder.WriteString(fmt.Sprintf("%v", c.CheckinTime))
	builder.WriteString(", event_id=")
	builder.WriteString(c.EventID)
	builder.WriteByte(')')
	return builder.String()
}

// Checkins is a parsable slice of Checkin.
type Checkins []*Checkin

func (c Checkins) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
