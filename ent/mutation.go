// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"helloworld/ent/checkin"
	"helloworld/ent/predicate"
	"helloworld/ent/user"
	"sync"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCheckin = "Checkin"
	TypeUser    = "User"
)

// CheckinMutation represents an operation that mutates the Checkin nodes in the graph.
type CheckinMutation struct {
	config
	op              Op
	typ             string
	id              *int
	checkin_time    *int64
	addcheckin_time *int64
	event_id        *string
	clearedFields   map[string]struct{}
	sender          *int
	clearedsender   bool
	done            bool
	oldValue        func(context.Context) (*Checkin, error)
	predicates      []predicate.Checkin
}

var _ ent.Mutation = (*CheckinMutation)(nil)

// checkinOption allows management of the mutation configuration using functional options.
type checkinOption func(*CheckinMutation)

// newCheckinMutation creates new mutation for the Checkin entity.
func newCheckinMutation(c config, op Op, opts ...checkinOption) *CheckinMutation {
	m := &CheckinMutation{
		config:        c,
		op:            op,
		typ:           TypeCheckin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCheckinID sets the ID field of the mutation.
func withCheckinID(id int) checkinOption {
	return func(m *CheckinMutation) {
		var (
			err   error
			once  sync.Once
			value *Checkin
		)
		m.oldValue = func(ctx context.Context) (*Checkin, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Checkin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCheckin sets the old Checkin of the mutation.
func withCheckin(node *Checkin) checkinOption {
	return func(m *CheckinMutation) {
		m.oldValue = func(context.Context) (*Checkin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CheckinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CheckinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CheckinMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCheckinTime sets the "checkin_time" field.
func (m *CheckinMutation) SetCheckinTime(i int64) {
	m.checkin_time = &i
	m.addcheckin_time = nil
}

// CheckinTime returns the value of the "checkin_time" field in the mutation.
func (m *CheckinMutation) CheckinTime() (r int64, exists bool) {
	v := m.checkin_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckinTime returns the old "checkin_time" field's value of the Checkin entity.
// If the Checkin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CheckinMutation) OldCheckinTime(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCheckinTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCheckinTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckinTime: %w", err)
	}
	return oldValue.CheckinTime, nil
}

// AddCheckinTime adds i to the "checkin_time" field.
func (m *CheckinMutation) AddCheckinTime(i int64) {
	if m.addcheckin_time != nil {
		*m.addcheckin_time += i
	} else {
		m.addcheckin_time = &i
	}
}

// AddedCheckinTime returns the value that was added to the "checkin_time" field in this mutation.
func (m *CheckinMutation) AddedCheckinTime() (r int64, exists bool) {
	v := m.addcheckin_time
	if v == nil {
		return
	}
	return *v, true
}

// ResetCheckinTime resets all changes to the "checkin_time" field.
func (m *CheckinMutation) ResetCheckinTime() {
	m.checkin_time = nil
	m.addcheckin_time = nil
}

// SetEventID sets the "event_id" field.
func (m *CheckinMutation) SetEventID(s string) {
	m.event_id = &s
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *CheckinMutation) EventID() (r string, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Checkin entity.
// If the Checkin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CheckinMutation) OldEventID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *CheckinMutation) ResetEventID() {
	m.event_id = nil
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *CheckinMutation) SetSenderID(id int) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *CheckinMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *CheckinMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *CheckinMutation) SenderID() (id int, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *CheckinMutation) SenderIDs() (ids []int) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *CheckinMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// Where appends a list predicates to the CheckinMutation builder.
func (m *CheckinMutation) Where(ps ...predicate.Checkin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CheckinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Checkin).
func (m *CheckinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CheckinMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.checkin_time != nil {
		fields = append(fields, checkin.FieldCheckinTime)
	}
	if m.event_id != nil {
		fields = append(fields, checkin.FieldEventID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CheckinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case checkin.FieldCheckinTime:
		return m.CheckinTime()
	case checkin.FieldEventID:
		return m.EventID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CheckinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case checkin.FieldCheckinTime:
		return m.OldCheckinTime(ctx)
	case checkin.FieldEventID:
		return m.OldEventID(ctx)
	}
	return nil, fmt.Errorf("unknown Checkin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CheckinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case checkin.FieldCheckinTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckinTime(v)
		return nil
	case checkin.FieldEventID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	}
	return fmt.Errorf("unknown Checkin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CheckinMutation) AddedFields() []string {
	var fields []string
	if m.addcheckin_time != nil {
		fields = append(fields, checkin.FieldCheckinTime)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CheckinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case checkin.FieldCheckinTime:
		return m.AddedCheckinTime()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CheckinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case checkin.FieldCheckinTime:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCheckinTime(v)
		return nil
	}
	return fmt.Errorf("unknown Checkin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CheckinMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CheckinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CheckinMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Checkin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CheckinMutation) ResetField(name string) error {
	switch name {
	case checkin.FieldCheckinTime:
		m.ResetCheckinTime()
		return nil
	case checkin.FieldEventID:
		m.ResetEventID()
		return nil
	}
	return fmt.Errorf("unknown Checkin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CheckinMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.sender != nil {
		edges = append(edges, checkin.EdgeSender)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CheckinMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case checkin.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CheckinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CheckinMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CheckinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsender {
		edges = append(edges, checkin.EdgeSender)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CheckinMutation) EdgeCleared(name string) bool {
	switch name {
	case checkin.EdgeSender:
		return m.clearedsender
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CheckinMutation) ClearEdge(name string) error {
	switch name {
	case checkin.EdgeSender:
		m.ClearSender()
		return nil
	}
	return fmt.Errorf("unknown Checkin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CheckinMutation) ResetEdge(name string) error {
	switch name {
	case checkin.EdgeSender:
		m.ResetSender()
		return nil
	}
	return fmt.Errorf("unknown Checkin edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op              Op
	typ             string
	id              *int
	phone_number    *string
	clearedFields   map[string]struct{}
	checkins        map[int]struct{}
	removedcheckins map[int]struct{}
	clearedcheckins bool
	done            bool
	oldValue        func(context.Context) (*User, error)
	predicates      []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetPhoneNumber sets the "phone_number" field.
func (m *UserMutation) SetPhoneNumber(s string) {
	m.phone_number = &s
}

// PhoneNumber returns the value of the "phone_number" field in the mutation.
func (m *UserMutation) PhoneNumber() (r string, exists bool) {
	v := m.phone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldPhoneNumber returns the old "phone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhoneNumber: %w", err)
	}
	return oldValue.PhoneNumber, nil
}

// ResetPhoneNumber resets all changes to the "phone_number" field.
func (m *UserMutation) ResetPhoneNumber() {
	m.phone_number = nil
}

// AddCheckinIDs adds the "checkins" edge to the Checkin entity by ids.
func (m *UserMutation) AddCheckinIDs(ids ...int) {
	if m.checkins == nil {
		m.checkins = make(map[int]struct{})
	}
	for i := range ids {
		m.checkins[ids[i]] = struct{}{}
	}
}

// ClearCheckins clears the "checkins" edge to the Checkin entity.
func (m *UserMutation) ClearCheckins() {
	m.clearedcheckins = true
}

// CheckinsCleared reports if the "checkins" edge to the Checkin entity was cleared.
func (m *UserMutation) CheckinsCleared() bool {
	return m.clearedcheckins
}

// RemoveCheckinIDs removes the "checkins" edge to the Checkin entity by IDs.
func (m *UserMutation) RemoveCheckinIDs(ids ...int) {
	if m.removedcheckins == nil {
		m.removedcheckins = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.checkins, ids[i])
		m.removedcheckins[ids[i]] = struct{}{}
	}
}

// RemovedCheckins returns the removed IDs of the "checkins" edge to the Checkin entity.
func (m *UserMutation) RemovedCheckinsIDs() (ids []int) {
	for id := range m.removedcheckins {
		ids = append(ids, id)
	}
	return
}

// CheckinsIDs returns the "checkins" edge IDs in the mutation.
func (m *UserMutation) CheckinsIDs() (ids []int) {
	for id := range m.checkins {
		ids = append(ids, id)
	}
	return
}

// ResetCheckins resets all changes to the "checkins" edge.
func (m *UserMutation) ResetCheckins() {
	m.checkins = nil
	m.clearedcheckins = false
	m.removedcheckins = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.phone_number != nil {
		fields = append(fields, user.FieldPhoneNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPhoneNumber:
		return m.PhoneNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldPhoneNumber:
		return m.OldPhoneNumber(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldPhoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhoneNumber(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldPhoneNumber:
		m.ResetPhoneNumber()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.checkins != nil {
		edges = append(edges, user.EdgeCheckins)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCheckins:
		ids := make([]ent.Value, 0, len(m.checkins))
		for id := range m.checkins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcheckins != nil {
		edges = append(edges, user.EdgeCheckins)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCheckins:
		ids := make([]ent.Value, 0, len(m.removedcheckins))
		for id := range m.removedcheckins {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcheckins {
		edges = append(edges, user.EdgeCheckins)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCheckins:
		return m.clearedcheckins
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCheckins:
		m.ResetCheckins()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
